from keras.datasets import cifar10
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

#o vetor x_train guarda as informacoes da imagem como tamanho e cores, o y_train
#informa a label dela

#converte as labels do y_train atraves do metodo one-hot enconding
import keras
y_train_one_hot = keras.utils.to_categorical(y_train, 10)
y_test_one_hot = keras.utils.to_categorical(y_test, 10)

#transforma as imagens em 0 ou 1
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train = x_train / 255
x_test = x_test / 255



#construindo a rede
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
model = Sequential()  #inicializa


#adiciona camadas (organizacao: duas conv layer, uma maxpool layer e uma dropout layer)
model.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32,32,3)))
model.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

#mesma sequencia de camadas mas com 64 de profundidade
model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(10, activation='softmax'))

#com as camadas prontas, precisamos compilar o modelo
model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

#comece o treinamento, sera utilizado 20% do dataset para validação
hist = model.fit(x_train, y_train_one_hot,
           batch_size=32, epochs=20,
           validation_split=0.2)

#salve o modelo treinado
model.save('cnn.h5')
